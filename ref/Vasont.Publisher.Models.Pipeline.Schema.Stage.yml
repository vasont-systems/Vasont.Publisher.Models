### YamlMime:ManagedReference
items:
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage
  commentId: T:Vasont.Publisher.Models.Pipeline.Schema.Stage
  id: Stage
  parent: Vasont.Publisher.Models.Pipeline.Schema
  children:
  - Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
  - Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
  - Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
  - Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
  langs:
  - csharp
  - vb
  name: Stage
  nameWithType: Stage
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage
  type: Class
  source:
    remote:
      path: src/Pipeline/Schema/Stage.cs
      branch: develop
      repo: git@github.com:vasont-systems/Vasont.Publisher.Models.git
    id: Stage
    path: Pipeline/Schema/Stage.cs
    startLine: 14
  assemblies:
  - Vasont.Publisher.Models
  namespace: Vasont.Publisher.Models.Pipeline.Schema
  summary: "\nThis class represents a pipeline execution stage within the configuration.\n"
  example: []
  syntax:
    content: public class Stage
    content.vb: Public Class Stage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
  commentId: P:Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
  id: StageId
  parent: Vasont.Publisher.Models.Pipeline.Schema.Stage
  langs:
  - csharp
  - vb
  name: StageId
  nameWithType: Stage.StageId
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
  type: Property
  source:
    remote:
      path: src/Pipeline/Schema/Stage.cs
      branch: develop
      repo: git@github.com:vasont-systems/Vasont.Publisher.Models.git
    id: StageId
    path: Pipeline/Schema/Stage.cs
    startLine: 20
  assemblies:
  - Vasont.Publisher.Models
  namespace: Vasont.Publisher.Models.Pipeline.Schema
  summary: "\nGets or sets the stage identifier.\n"
  example: []
  syntax:
    content: public Guid StageId { get; set; }
    parameters: []
    return:
      type: System.Guid
      description: The stage identifier.
    content.vb: Public Property StageId As Guid
  overload: Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
  commentId: P:Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
  id: Name
  parent: Vasont.Publisher.Models.Pipeline.Schema.Stage
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Stage.Name
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
  type: Property
  source:
    remote:
      path: src/Pipeline/Schema/Stage.cs
      branch: develop
      repo: git@github.com:vasont-systems/Vasont.Publisher.Models.git
    id: Name
    path: Pipeline/Schema/Stage.cs
    startLine: 25
  assemblies:
  - Vasont.Publisher.Models
  namespace: Vasont.Publisher.Models.Pipeline.Schema
  summary: "\nGets or sets the name of the stage.\n"
  example: []
  syntax:
    content: >-
      [Required]

      [MaxLength(100)]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <MaxLength(100)>

      Public Property Name As String
  overload: Vasont.Publisher.Models.Pipeline.Schema.Stage.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 100
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
  commentId: P:Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
  id: Description
  parent: Vasont.Publisher.Models.Pipeline.Schema.Stage
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Stage.Description
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
  type: Property
  source:
    remote:
      path: src/Pipeline/Schema/Stage.cs
      branch: develop
      repo: git@github.com:vasont-systems/Vasont.Publisher.Models.git
    id: Description
    path: Pipeline/Schema/Stage.cs
    startLine: 32
  assemblies:
  - Vasont.Publisher.Models
  namespace: Vasont.Publisher.Models.Pipeline.Schema
  summary: "\nGets or sets an optional stage description.\n"
  example: []
  syntax:
    content: >-
      [MaxLength(1000)]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <MaxLength(1000)>

      Public Property Description As String
  overload: Vasont.Publisher.Models.Pipeline.Schema.Stage.Description*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 1000
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
  commentId: P:Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
  id: Jobs
  parent: Vasont.Publisher.Models.Pipeline.Schema.Stage
  langs:
  - csharp
  - vb
  name: Jobs
  nameWithType: Stage.Jobs
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
  type: Property
  source:
    remote:
      path: src/Pipeline/Schema/Stage.cs
      branch: develop
      repo: git@github.com:vasont-systems/Vasont.Publisher.Models.git
    id: Jobs
    path: Pipeline/Schema/Stage.cs
    startLine: 38
  assemblies:
  - Vasont.Publisher.Models
  namespace: Vasont.Publisher.Models.Pipeline.Schema
  summary: "\nGets or sets a list of jobs to execute within the stage.\n"
  example: []
  syntax:
    content: >-
      [Required]

      public List<Job> Jobs { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Vasont.Publisher.Models.Pipeline.Schema.Job}
    content.vb: >-
      <Required>

      Public Property Jobs As List(Of Job)
  overload: Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Vasont.Publisher.Models.Pipeline.Schema
  commentId: N:Vasont.Publisher.Models.Pipeline.Schema
  name: Vasont.Publisher.Models.Pipeline.Schema
  nameWithType: Vasont.Publisher.Models.Pipeline.Schema
  fullName: Vasont.Publisher.Models.Pipeline.Schema
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId*
  commentId: Overload:Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
  name: StageId
  nameWithType: Stage.StageId
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.StageId
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Name*
  commentId: Overload:Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
  name: Name
  nameWithType: Stage.Name
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Description*
  commentId: Overload:Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
  name: Description
  nameWithType: Stage.Description
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Description
- uid: Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs*
  commentId: Overload:Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
  name: Jobs
  nameWithType: Stage.Jobs
  fullName: Vasont.Publisher.Models.Pipeline.Schema.Stage.Jobs
- uid: System.Collections.Generic.List{Vasont.Publisher.Models.Pipeline.Schema.Job}
  commentId: T:System.Collections.Generic.List{Vasont.Publisher.Models.Pipeline.Schema.Job}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Job>
  nameWithType: List<Job>
  fullName: System.Collections.Generic.List<Vasont.Publisher.Models.Pipeline.Schema.Job>
  nameWithType.vb: List(Of Job)
  fullName.vb: System.Collections.Generic.List(Of Vasont.Publisher.Models.Pipeline.Schema.Job)
  name.vb: List(Of Job)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vasont.Publisher.Models.Pipeline.Schema.Job
    name: Job
    nameWithType: Job
    fullName: Vasont.Publisher.Models.Pipeline.Schema.Job
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vasont.Publisher.Models.Pipeline.Schema.Job
    name: Job
    nameWithType: Job
    fullName: Vasont.Publisher.Models.Pipeline.Schema.Job
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
